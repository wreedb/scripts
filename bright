#!/bin/env perl

use strict;
use warnings;
use Getopt::Long;

GetOptions(
    'up|u'     => \my $up,
    'down|d'   => \my $down,
    'set|s=i'  => \my $set,
    'help|h'   => \my $help
) or die "Invalid argument given to $0, see --help for usage information";

my $usage = "\x1B[1;3mbright\x1B[0m - USAGE:\n\n\t--up/-u\t\tIncrease brightness by 5%\n\t--down/-d\tDecrease brightness by 5%\n\t--set/-s \x1B[3mNUM\x1B[0m\tSet brightness to \x1B[3mNUM\x1B[0m %\n\n";

if ($help) { print $usage; exit 0; }

if (! $help && ! $set && ! $up && ! $down) { print $usage; exit 1; }

my $current_brightness = `xbacklight -get`; chomp $current_brightness;
my $current = int($current_brightness);

if ($set)
{
    if (int($set) < 5)
    { print "bright: brightness too low, it'll be hard to fix if set to 0!\n"; exit 1; }
    elsif (int($set) > 100)
    { print "bright: brightness cannot exceed 100%, setting to maximum\n"; $set = 100; }
    system "xbacklight -set ${set}";
    my $output = `xbacklight -get`; chomp $output;
    system "notify-send -a xbacklight -t 500 'Brightness: ${output}%'";
    exit 0;
}

elsif ($up)
{
    if ($current >= 100) { print "bright: brightness already at maximum\n"; exit 0; }
    system "xbacklight -inc 5";
    my $output = `xbacklight -get`; chomp $output;
    system "notify-send -a xbacklight -t 500 'Brightness: ${output}%'";
    exit 0;
}

elsif ($down)
{
    if ($current < 5) { print "bright: brightness too low, it'll be hard to fix if set to 0!\n"; exit 1; }
    system "xbacklight -dec 5";
    my $output = `xbacklight -get`; chomp $output;
    system "notify-send -a xbacklight -t 500 'Brightness: ${output}%'";
    exit 0;
}
